docker安装

	docker目前可以在centos7/redhat7上安装,内核版本必须大于3.10
	检查依赖性：
		uname -r 
		


image镜像
	一个只读层被称为镜像，一个镜像永远不会变的
	docker使用一个统一的文件系统，docker进程认为整个文件系统是以读写方式挂载的。但所有的变更只发生在位于顶部的可写层，下层的原始的只读镜像文件不发生改变。
	由于镜像不可写，所有镜像是无状态的。
	基础镜像：
		一个没有任何父镜像的镜像，谓之基础镜像
	注：镜像不能超过127层
		
	镜像ID：
		所有镜像都是通过一个 64 位十六进制字符串 （内部是一个 256 bit 的值）来标识的。 为简化使用，前 12 个字符可以组成一个短ID，可以在命令行中使用。短ID还是有一定的 碰撞机率，所以服务器总是返回长ID
		
		
	获取镜像：
		docker pull		从仓库获取所需要的镜像
			默认仓库地址：registry.hub.docker.com
		如果想从非默认仓库获取镜像，需要指定具体的仓库路径。
		
	列出本地镜像：
		docker images	显示本地已有的镜像
		输出：
			来自哪个仓库	标记	ID		创建时间	镜像大小
			repository		tag		imageid		create	 virtualsize
		如果启动时不指定tag，默认为latest
		
		
	创建镜像：
		方法一：
		# docker commit -m "Added json gem" -a "Docker Newbee"   0b2616b0e5a8 		ouruser/sinatra:v2
							说明信息			更新用户信息	创建镜像的容器的ID	指定目标镜像的仓库名和 tag 信息
			-m：说明信息
			-a：可以指定更新的用户信息
		注：使用 docker commit 来扩展一个镜像比较简单，但是不方便在一个团队中分享
			
		方法二：
			使用 docker build来创建一个新的镜像；
			首先需要创建一个Dockerfile，包含一些如何创建镜像的指令
			
			新建一个目录和一个Dockerfile
				mkdir	sinatra
				cd sinatra
				touch Dockerfile
			Dockerfile中的每条指令都创建镜像的一层，如下：
				#This is 啊comment
				FROM ubuntu:14.04
				MAINTAINER Docker Newbee <newbee@docker.com>
				RUN  apt-get  -qq update
				RUN  apt-get -qqy  install  ruby  ruby-dev
				RUN  gem install sinatra
			
			Dockerfile基本语法是：
				#：注释
				FROM：告诉Docker使用那个镜像做为基础
				接着维护者信息
				RUN开头的指令会在创建中运行
				ADD：复制本地文件到镜像
				EXPOSE：向外部开发端口
				CMD：容器启动后运行的程序
			编写完Dockerfile可以使用”docker build“来生成镜像
				docker build -t="ouruser/sinatra:v2"  .
					-t：标记
					.:Dockerfile所在路径
		
		docker tag    修改标签
		
		将本地文件系统导入：
			要从本地文件系统导入一个镜像，可以使用 openvz（容器虚拟化的先锋技术）的模板来创建： openvz 的模板下载地址为 templates 。

			比如，先下载了一个 ubuntu-14.04 的镜像，之后使用以下命令导入：
				# cat ubuntu-14.04-x86_64-minimal.tar.gz  |docker import - ubuntu:14.04
			查看新导入的镜像
			docker images
		
		上传镜像：
			docker push    把自己创建的镜像上传到仓库中来共享
		
			docker push ouruser/sinatra
		
		存入和载入镜像：
			导出镜像到本地文件
				docker  save
				# docker save -o ubuntu_14.04.tar ubuntu:14.04
		
			载入镜像
				docker load		从导出的本地文件中再导入到本地镜像库
				
				docker load --input ubuntu_14.04.tar
			 或 docker load < ubuntu_14.04.tar
				将导入镜像以及其相关的元数据信息（包括标签等）
		
		移除本地镜像：
			docker rmi			移除本地镜像
			docker rmi			移除容器
			*注意：在删除镜像之前要先用 docker rm 删掉依赖于这个镜像的所有容器。
		
		镜像的实现原理：
			docker镜像如何实现增量的修改和维护的？
				 每个镜像都由很多层次构成，Docker 使用 Union FS 将这些不同的层结合到一个镜像中去。
		
			通常 Union FS 有两个用途, 
				一方面可以实现不借助 LVM、RAID 将多个 disk 挂到同一个目录下；
				一个更常用的就是将一个只读的分支和一个可写的分支联合在一起，Live CD 正是基于此方法可以允许在镜像不变的基础上允许用户在其上进行一些写操作。 
				Docker 在 AUFS 上构建的容器也是利用了类似的原理。
		
		
docker容器
	启动容器：
		启动容器有两种方式：
			a、基于镜像新建一个容器并启动
			b、将终止状态（stopped）的容器重新启动
		
		1）新建并启动
			docker run
		
			docker run ubuntu:14.04 /bin/echo 'Hello world'
			docker run -t -i ubuntu:14.04 /bin/bash
				-t：让docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上
				-i：让容器的标准输入保持打开
			docker run -t -i ubuntu:14.04 /bin/bash
				启动bash终端，允许用户进行交互
			
			当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：
				检查本地是否存在指定的镜像，不存在就从公有仓库下载
				利用镜像创建并启动一个容器
				分配一个文件系统，并在只读的镜像层外面挂载一层可读写层
				从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去
				从地址池配置一个 ip 地址给容器
				执行用户指定的应用程序
				执行完毕后容器被终止
		2）启动终止容器
			docker start
			容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 ps 或 top 来查看进程信息。
		
	守护态运行：
		-d  让docker容器在后台以守护态（daemonized）形式运行
		
		docker ps     查看容器信息
		docker logs		获取容器的输出信息
		
	终止容器：
		docker  stop
		
		当Docker容器中指定的应用终结时，容器也自动终止。
		对于只启动了一个终端的容器，用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。
		
		终止状态的容器可以用“docker ps  -a ”查看
		通过“docker start” 重新启动
		docker restart 将一个运行态的容器终止，然后重新启动
		
	进入容器：
		docker  attach
		只启动了一个终端的容器，用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止
		
		nsenter
			该命令在util-linux包2.23版本后包含。如果没有可以源码安装
			安装：
				$ cd /tmp; curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-; cd util-linux-2.24;
				$ ./configure --without-ncurses
				$ make nsenter && sudo cp nsenter /usr/local/bin
			使用：
				nsenter 可以访问另一个进程的名字空间。nsenter 要正常工作需要有 root 权限。
				为了连接容器，需要找到容器的第一个进程的PID，
					PID=$(docker inspect --format "{{ .State.Pid }}" <container>)
				通过该PID，可以连接到这个容器
					nsenter --target $PID --mount --uts --ipc --net --pid
		
				建议：
					建议下载 .bashrc_docker，并将内容放到 .bashrc 中。
						$ wget -P ~ https://github.com/yeasy/docker_practice/raw/master/_local/.bashrc_docker;
						$ echo "[ -f ~/.bashrc_docker ] && . ~/.bashrc_docker" >> ~/.bashrc; source ~/.bashrc
					这个文件中定义了很多方便使用 Docker 的命令，例如 docker-pid 可以获取某个容器的 PID；而 docker-enter 可以进入容器或直接在容器内执行命令。
						$ echo $(docker-pid <container>)
						$ docker-enter <container> ls
		
		
	导出和导入容器：
		导出容器：
			docker export		导出本地某个容器
				
				$ sudo docker ps -a
				CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES
				7691a814370e        ubuntu:14.04        "/bin/bash"         36 hours ago        Exited (0) 21 hours ago                       test
				$ sudo docker export 7691a814370e > ubuntu.tar
				这样将导出容器快照到本地文件。
		
		导入容器：
			docker  import		1、从容器快照文件中在导入为镜像
									$ cat ubuntu.tar | sudo docker import - test/ubuntu:v1.0
									$ sudo docker images
									REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE
									test/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB
								2、通过指定 URL 或者某个目录来导入
									$sudo docker import http://example.com/exampleimage.tgz example/imagerepo
		
			注：使用 docker load 来导入镜像存储文件到本地镜像库；
				使用 docker import 来导入一个容器快照到本地镜像库；
			两者的区别：在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），
						镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。
		
	删除容器：
		docker  rm		删除一个处于  终止  状态的容器
			-f：强制删除运行中的容器，docker会发送SIGKILL信号给容器
		
		
		
		
		
